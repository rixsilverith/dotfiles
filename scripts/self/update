#!/usr/bin/bash
set -euo pipefail

##? Check for updates and sync the dotfiles

source "${DOTFILES_HOME}/scripts/core/log.sh"

apply_symlinks() {
    ln -sf "$DOTFILES_HOME/bin" "$HOME"
    mv "$HOME/bin" "$HOME/.bin"

    ln -sf "$DOTFILES_HOME/scripts" "$HOME"
    mv "$HOME/scripts" "$HOME/.scripts"

    ln -sf "$DOTFILES_HOME/themes" "$HOME"
    mv "$HOME/themes" "$HOME/.themes"

    ln -sf "$DOTFILES_HOME/icons" "$HOME"
    mv "$HOME/icons" "$HOME/.icons"

    ln -sf "$DOTFILES_HOME/misc" "$HOME"
    mv "$HOME/misc" "$HOME/.misc"
}

project_status() {
    cd "$DOTFILES_HOME" || exit

    local -r UPSTREAM="master"
    local -r LOCAL=$(git rev-parse @)
    local -r REMOTE=$(git rev-parse "$UPSTREAM")
    local -r BASE=$(git merge-base @ "$UPSTREAM")

    if [[ "$LOCAL" == "$REMOTE" ]]; then
        echo "synced"
    elif [[ "$LOCAL" == "$BASE" ]]; then
        echo "behind"
    elif [[ "$REMOTE" == "$BASE" ]]; then
        echo "ahead"
    else
        echo "diverged"
    fi
}

self_update() {
    cd "$DOTFILES_HOME" || exit

    _info "Checking for updates..."

    git fetch
    if [[ $(project_status) == "behind" ]]; then
        i=$(feedback::confirmation "A new version of the dotfiles is available! Wanna clone it?")
        if [[ $i -eq 0 ]]; then
            _info "Pulling from GitHub..."
            git pull >/dev/null 2>&1 && exit 0 || _error "Failed to pull from GitHub"
        else
            exit 1
        fi
    else
        _info "Your dotfiles are up to date :)"
        exit 0
    fi
}

echo
_info "Checking for updates..."
self_update
echo
